package tw.core;/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import tw.core.exception.OutOfGuessCountException;
import tw.core.generator.AnswerGenerator;
import tw.core.model.GuessResult;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class GameTest {

    private final Answer actualAnswer = Answer.createAnswer("1 2 3 4");
    private Game game;

    @BeforeEach
    public void setUp() throws Exception {
        AnswerGenerator answerGenerator = mock(AnswerGenerator.class);
        when(answerGenerator.generate()).thenReturn(actualAnswer);
        game = new Game(answerGenerator);
    }


    @Test
    public void should_get_the_success_status_when_guess_input_is_correct() throws Exception {

        //given
//        excuteSuccessGuess();
        GuessResult guess = game.guess(Answer.createAnswer("1 2 3 4"));
        //when
        //then
        assertThat(guess.getResult(), is("4A0B"));

    }

    @Test
    public void should_get_success_status_when_call_checkStatus_given_correct_answer() throws Exception {
        game.guess(Answer.createAnswer("1 2 3 4"));

        assertThat(game.checkStatus(), is("success"));
    }

    @Test
    public void should_get_continue_status_when_call_checkStatus_given_incorrect_answer() throws Exception {
        game.guess(Answer.createAnswer("5 2 3 4"));

        assertThat(game.checkStatus(), is("continue"));
    }

    @Test
    public void should_get_fail_status_when_call_checkStatus_given_guess_times_bigger_than_six() throws Exception {
        game.guess(Answer.createAnswer("1 2 3 5"));
        game.guess(Answer.createAnswer("1 2 3 6"));
        game.guess(Answer.createAnswer("1 2 3 7"));
        game.guess(Answer.createAnswer("1 2 3 8"));
        game.guess(Answer.createAnswer("1 2 3 9"));
        game.guess(Answer.createAnswer("1 2 3 0"));

        assertThat(game.checkStatus(), is("fail"));
    }

    @Test
    public void should_get_true_when_call_checkCoutinue_given_incorrect_answer() throws Exception {
        game.guess(Answer.createAnswer("1 2 3 5"));

        assertThat(game.checkCoutinue(), is(true));
    }

    @Test
    public void should_get_false_when_call_checkCoutinue_given_correct_answer() throws Exception {
        game.guess(Answer.createAnswer("1 2 3 4"));

        assertThat(game.checkCoutinue(), is(false));
    }

    @Test
    public void should_get_correct_history_result_when_call_guessHistory_given_an_answer() throws Exception {
        game.guess(Answer.createAnswer("1 2 3 4"));

        assertThat(game.guessHistory().get(0).getResult(), is("4A0B"));
    }
}
